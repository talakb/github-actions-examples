name: Code Quality Checks

# This workflow demonstrates code quality automation
# Includes linting, security scanning, and code analysis
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

jobs:
  # Linting and formatting checks
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for linting
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Create demo files for linting
      run: |
        # Create JavaScript files with various issues
        mkdir -p src
        cat << 'EOF' > src/good-code.js
        /**
         * A well-formatted JavaScript file
         */
        function calculateSum(a, b) {
          if (typeof a !== 'number' || typeof b !== 'number') {
            throw new Error('Both arguments must be numbers');
          }
          return a + b;
        }

        module.exports = { calculateSum };
        EOF
        
        cat << 'EOF' > src/bad-code.js
        // Poorly formatted code with issues
        function badFunction(x,y){
        var result=x+y
        console.log("Result is "+result)
        return result
        }
        var unused_variable = "this is not used";
        EOF
        
        # Create ESLint config
        cat << 'EOF' > .eslintrc.json
        {
          "env": {
            "node": true,
            "es2021": true
          },
          "extends": ["eslint:recommended"],
          "parserOptions": {
            "ecmaVersion": 12,
            "sourceType": "module"
          },
          "rules": {
            "indent": ["error", 2],
            "quotes": ["error", "single"],
            "semi": ["error", "always"],
            "no-unused-vars": "error",
            "no-console": "warn"
          }
        }
        EOF
        
        # Create package.json with linting scripts
        cat << 'EOF' > package.json
        {
          "name": "code-quality-demo",
          "version": "1.0.0",
          "scripts": {
            "lint": "eslint src/",
            "lint:fix": "eslint src/ --fix",
            "format": "prettier --write src/"
          },
          "devDependencies": {
            "eslint": "^8.0.0",
            "prettier": "^2.0.0"
          }
        }
        EOF
        
    - name: Install linting dependencies
      run: npm install
      
    - name: Run ESLint
      run: |
        echo "Running ESLint on all files..."
        npm run lint || echo "ESLint found issues (expected for demo)"
        
    - name: Run ESLint on good code only
      run: |
        echo "Running ESLint on well-formatted file:"
        npx eslint src/good-code.js
        
    - name: Run Prettier check
      run: |
        echo "Checking code formatting with Prettier..."
        npx prettier --check src/ || echo "Prettier found formatting issues (expected for demo)"

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create demo files with security issues
      run: |
        mkdir -p vulnerable
        
        # Create a Node.js file with security issues
        cat << 'EOF' > vulnerable/app.js
        const express = require('express');
        const app = express();

        // Security issue: No input validation
        app.get('/user/:id', (req, res) => {
          const userId = req.params.id;
          // This could be vulnerable to injection
          const query = `SELECT * FROM users WHERE id = ${userId}`;
          res.json({ query: query });
        });

        // Security issue: Hardcoded secret
        const API_KEY = 'sk-1234567890abcdef';

        app.listen(3000);
        EOF
        
        # Create package.json with vulnerable dependencies
        cat << 'EOF' > package.json
        {
          "name": "vulnerable-app",
          "version": "1.0.0",
          "dependencies": {
            "express": "4.17.1",
            "lodash": "4.17.15"
          }
        }
        EOF
        
    - name: Setup Node.js for security scan
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run npm audit
      run: |
        echo "Running npm audit for dependency vulnerabilities..."
        npm audit || echo "npm audit found vulnerabilities (expected for demo)"
        
    - name: Simulate security scanning
      run: |
        echo "Simulating security scan results..."
        echo "üîç Security Scan Results:"
        echo "‚ùå Hardcoded API key found in vulnerable/app.js:12"
        echo "‚ùå SQL injection vulnerability in vulnerable/app.js:7"
        echo "‚ö†Ô∏è  Outdated dependencies with known vulnerabilities"
        echo "üìä Security Score: 3/10"

  # Code complexity analysis
  complexity-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create complex code example
      run: |
        mkdir -p analysis
        cat << 'EOF' > analysis/complex.js
        // Example of complex code with high cyclomatic complexity
        function complexFunction(input) {
          if (input === null) {
            return null;
          }
          
          if (typeof input === 'string') {
            if (input.length === 0) {
              return '';
            } else if (input.length < 5) {
              return input.toUpperCase();
            } else if (input.length < 10) {
              return input.toLowerCase();
            } else {
              return input.substring(0, 10);
            }
          } else if (typeof input === 'number') {
            if (input === 0) {
              return 0;
            } else if (input > 0) {
              if (input > 100) {
                return 100;
              } else {
                return input * 2;
              }
            } else {
              if (input < -100) {
                return -100;
              } else {
                return input * -1;
              }
            }
          } else if (Array.isArray(input)) {
            if (input.length === 0) {
              return [];
            } else {
              return input.map(item => {
                if (typeof item === 'string') {
                  return item.toUpperCase();
                } else {
                  return item;
                }
              });
            }
          } else {
            return undefined;
          }
        }
        EOF
        
    - name: Analyze code complexity (simulation)
      run: |
        echo "üìä Code Complexity Analysis:"
        echo "File: analysis/complex.js"
        echo "- Cyclomatic Complexity: 12 (High - Recommended: < 10)"
        echo "- Lines of Code: 45"
        echo "- Number of Parameters: 1"
        echo "- Nesting Depth: 4 (High - Recommended: < 3)"
        echo ""
        echo "Recommendations:"
        echo "1. Break down the function into smaller functions"
        echo "2. Use switch statements instead of nested if-else"
        echo "3. Consider using polymorphism or strategy pattern"

  # Documentation checks
  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README exists
      run: |
        if [ ! -f "README.md" ]; then
          echo "‚ùå README.md not found"
          exit 1
        else
          echo "‚úÖ README.md found"
        fi
        
    - name: Check documentation quality
      run: |
        readme_lines=$(wc -l < README.md)
        echo "üìñ Documentation Analysis:"
        echo "README.md has $readme_lines lines"
        
        if [ $readme_lines -lt 20 ]; then
          echo "‚ö†Ô∏è  README is quite short - consider adding more documentation"
        else
          echo "‚úÖ README has good length"
        fi
        
        # Check for common sections
        if grep -q "## " README.md; then
          echo "‚úÖ README has sections (good structure)"
        else
          echo "‚ö†Ô∏è  Consider adding sections to README"
        fi
        
        if grep -q "install\|Install" README.md; then
          echo "‚úÖ Installation instructions found"
        else
          echo "‚ö†Ô∏è  Consider adding installation instructions"
        fi

  # Summary report
  quality-report:
    needs: [lint, security-scan, complexity-analysis, docs-check]
    runs-on: ubuntu-latest
    if: always()  # Run even if some checks failed
    
    steps:
    - name: Generate quality report
      run: |
        echo "# Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "Repository: ${{ github.repository }}" >> quality-report.md
        echo "Commit: ${{ github.sha }}" >> quality-report.md
        echo "" >> quality-report.md
        
        echo "## Check Results" >> quality-report.md
        echo "" >> quality-report.md
        
        # Check job results
        echo "- **Linting**: ${{ needs.lint.result }}" >> quality-report.md
        echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> quality-report.md
        echo "- **Complexity Analysis**: ${{ needs.complexity-analysis.result }}" >> quality-report.md
        echo "- **Documentation Check**: ${{ needs.docs-check.result }}" >> quality-report.md
        echo "" >> quality-report.md
        
        echo "## Summary" >> quality-report.md
        echo "" >> quality-report.md
        echo "This automated quality check helps maintain code standards and security." >> quality-report.md
        echo "Review the individual job outputs for detailed recommendations." >> quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
        
    - name: Display report
      run: |
        echo "üìã Quality Report Generated:"
        cat quality-report.md