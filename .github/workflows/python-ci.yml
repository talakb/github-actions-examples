name: Python CI

# This workflow demonstrates Python CI/CD pipeline
# Tests multiple Python versions with pip caching
on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'setup.py'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Create demo Python files
      run: |
        # Create a simple Python application
        cat << 'EOF' > app.py
        def add(a, b):
            """Add two numbers."""
            return a + b

        def main():
            result = add(2, 3)
            print(f"2 + 3 = {result}")
            return result

        if __name__ == "__main__":
            main()
        EOF
        
        # Create a test file
        cat << 'EOF' > test_app.py
        import unittest
        from app import add

        class TestApp(unittest.TestCase):
            def test_add(self):
                self.assertEqual(add(2, 3), 5)
                self.assertEqual(add(-1, 1), 0)
                self.assertEqual(add(0, 0), 0)

        if __name__ == "__main__":
            unittest.main()
        EOF
        
        # Create requirements.txt
        echo "pytest>=7.0.0" > requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint with flake8 (if available)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
      
    - name: Test with unittest
      run: python -m unittest test_app.py -v
      
    - name: Test with pytest
      run: pytest test_app.py -v
      
    - name: Run the application
      run: python app.py
      
    - name: Show Python version and environment
      run: |
        python --version
        pip --version
        echo "OS: ${{ matrix.os }}"
        echo "Python location: $(which python)"